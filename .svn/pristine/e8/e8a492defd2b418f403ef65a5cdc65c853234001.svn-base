package com.contactsImprove.controller.api;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.contactsImprove.constant.MerchantOrderConst.OrdersStatus;
import com.contactsImprove.constant.ResponseCode.StatusCode;
import com.contactsImprove.constant.SystemConst;
import com.contactsImprove.entity.api.Orders;
import com.contactsImprove.entity.api.PaymentMode;
import com.contactsImprove.service.api.OrdersService;
import com.contactsImprove.service.api.PaymentModeService;
import com.contactsImprove.utils.LoggerUtil;
import com.contactsImprove.utils.OrderUtil;
import com.contactsImprove.utils.QRCode;

@Controller
@RequestMapping("/api")
public class QRCodeController {
	@Autowired
	PaymentModeService paymentModeService;
	@Autowired
	OrdersService ordersService;	
	
	byte[] lock=new byte[0];
	
	/**
	 * 生成收款二维码
	 * @param payUrl
	 * @param response
	 * 	@RequestMapping(value = "/qrcode/{tradeNumber}/{sign}",method=RequestMethod.GET)
		public void qrcode(@PathVariable("tradeNumber") String tradeNumber,@PathVariable("sign") String sign,
			@RequestMapping(value = "/qrcode",method=RequestMethod.GET)
	public void qrcode(@RequestParam("tradeNumber")String tradeNumber,@RequestParam("sign")String sign,
	 */

/*	@RequestMapping(value = "/qrcode/{tradeNumber}/{sign}",method=RequestMethod.GET)
	public void qrcode(@PathVariable("tradeNumber") String tradeNumber,@PathVariable("sign") String sign,
			HttpServletRequest request,HttpServletResponse response){
		if(QRCode.logo==null) {
			synchronized(lock) {
				if(QRCode.logo==null) {
					String alipayLogo=request.getSession().getServletContext().getRealPath("");
					File f=new File(alipayLogo,"images/order/img/alipay.png");
					QRCode.init(f);
					f=null;
				}
			}			
		}
		StringBuilder sb=new StringBuilder();
		String scheme="http";
		if(request.getServerPort()==SystemConst.sslPort) {
			scheme="https";
		}
		sb.append(scheme+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath()+"/api/qrcodePay");
		sb.append("/"+tradeNumber+"/"+sign);		
		try {
			QRCode.createQRCode(sb.toString(), response.getOutputStream());
		} catch (IOException e) {
			LoggerUtil.debug(e.getMessage(), e);
		}							
	}*/
	
	/**
	 * 生成收款二维码
	 * @param payUrl
	 * @param response
	 */
	@RequestMapping(value = "/qrcode",method=RequestMethod.GET)
	public void qrcode(@RequestParam("paymentId")Long paymentId,@RequestParam("amount")String amount,
			HttpServletRequest request,HttpServletResponse response){
		if(QRCode.logo==null) {
			synchronized(lock) {
				if(QRCode.logo==null) {
					String alipayLogo=request.getSession().getServletContext().getRealPath("");
					File f=new File(alipayLogo,"images/order/img/alipay.png");
					QRCode.init(f);
					f=null;
				}
			}			
		}
		if(paymentId>0){
			PaymentMode pm=paymentModeService.selectByPrimaryKey(paymentId);
			StringBuilder sb=new StringBuilder();
			sb.append(SystemConst.payUrl);
			sb.append("&cardNo="+pm.getPaymentNumber());
			sb.append("&bankAccount="+pm.getUserName());
			sb.append("&money="+amount);
			sb.append("&amount="+amount);
			sb.append("&bankMark="+pm.getBankMark());
			sb.append("&bankName="+pm.getPaymentName());
			try {
				QRCode.createQRCode(sb.toString(), response.getOutputStream());
			} catch (IOException e) {
				LoggerUtil.error(e.toString(), e);
			}					
		}
	}	
	/**
	 * 生成收款二维码
	 * @param payUrl
	 * @param response
	 */
/*	@RequestMapping(value ="/qrcodePay",method=RequestMethod.GET)
	public String qrcodePay(@RequestParam("tradeNumber")String tradeNumber,@RequestParam("sign")String sign,*/
	@RequestMapping(value = "/qrcodePay/{tradeNumber}/{sign}",method=RequestMethod.GET)
	public String qrcodePay(@PathVariable("tradeNumber") String tradeNumber,@PathVariable("sign") String sign,HttpServletRequest request){
		Map<String, Object> map = new HashMap<>();
		String memSign= OrderUtil.hasOrderSign(tradeNumber);
	    if(!memSign.equals(sign)) {
			map.put("code", StatusCode._304.status);
			map.put("msg", StatusCode._304.msg);
			request.setAttribute("MSG", map);
			return "error";	
	    }
		Orders orders=ordersService.selectByPrimaryKey(tradeNumber);
		if(orders==null || orders.getStatus()>OrdersStatus._1.status){
			map.put("code", StatusCode._319.status);
			map.put("msg", StatusCode._319.msg);
			request.setAttribute("MSG", map);
			return "error";	
		}		
		if(orders.getPaymentId()>0){	
			PaymentMode pm=paymentModeService.selectByPrimaryKey(orders.getPaymentId());
			StringBuilder sb=new StringBuilder();
			sb.append(SystemConst.payUrl);
			sb.append("&cardNo="+pm.getPaymentNumber());
			sb.append("&bankAccount="+pm.getUserName());
			sb.append("&money="+orders.getActualAmount());
			sb.append("&amount="+orders.getActualAmount());
			sb.append("&bankMark="+pm.getBankMark());
			sb.append("&bankName="+pm.getPaymentName());
			request.setAttribute("payUrl", sb.toString());
		}
		request.setAttribute("payTimeOut", SystemConst.Order_TimeOut-((System.currentTimeMillis()-orders.getCreateTime().getTime())/1000));
		request.setAttribute("tradeNumber", tradeNumber);
		request.setAttribute("sign", sign);
		request.setAttribute("amount", orders.getActualAmount());
		return "orderSec";	
	}	
}
