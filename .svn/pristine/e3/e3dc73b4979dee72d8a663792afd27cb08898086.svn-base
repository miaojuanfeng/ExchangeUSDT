package com.contactsImprove.ferriswheel;


import java.util.List;
import com.contactsImprove.constant.SystemConst;
import com.contactsImprove.entity.api.MerchantNotify;
import com.contactsImprove.entity.api.Orders;
import com.contactsImprove.service.api.MerchantNotifyService;
import com.contactsImprove.service.api.OrdersService;
import com.contactsImprove.utils.DateTools;
import com.contactsImprove.utils.NotifyCommercial;


public class CheckOrderTimeout {


	private OrdersService ordersService;
	private MerchantNotifyService merchantNotifyService;
	private NotifyCommercial notifyCommercial;
	
	private boolean hasStart=false;
	
		
	public CheckOrderTimeout(OrdersService ordersService,MerchantNotifyService merchantNotifyService,NotifyCommercial notifyCommercial) {
		this.ordersService=ordersService;	
		this.merchantNotifyService=merchantNotifyService;
		this.notifyCommercial=notifyCommercial;
	}

	public void CheckOrder() {
		if(!hasStart) {
			hasStart=true;
			CheckOrderThread cot =new CheckOrderThread();
			cot.start();
		}
	}
	
	
	private class CheckOrderThread extends Thread{	
		@Override
		public void run() {
			// TODO Auto-generated method stub			
			List<Orders> list=ordersService.refineTimeoutOrder(SystemConst.Order_TimeOut);
			for(Orders od :list ) {
				int slotIndex=-1;				
				int secode=Math.abs((int)(((od.getCreateTime().getTime()+SystemConst.Order_TimeOut*1000)-System.currentTimeMillis())/1000));
				slotIndex=secode%Wheel.slot_max;
				Wheel.pushSlot(od.getTradeNumber(), slotIndex);									
			}
			list.clear();
			list=null;		
			//检查一下有没回调过期的。有则先回调。
			int slotIndex=DateTools.getSecondOfDay();
			
			List<MerchantNotify> notifyList=merchantNotifyService.selectByGreaterThanSlotIndex(slotIndex);
			for(int i=0;i<notifyList.size();i++) {
				MerchantNotify mn=notifyList.get(i);
				notifyCommercial.notifyOrderFinish(mn,mn.getPrivateKey());
			}
			notifyList=null;
			
			
		}
	}

}
