<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.contactsImprove.dao.api.UserWalletDao" >
  <resultMap id="BaseResultMap" type="com.contactsImprove.entity.api.UserWallet" >
    <id column="wallet_id" property="walletId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="phone_number" property="phoneNumber" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="TINYINT" />
    <result column="pay_password" property="payPassword" jdbcType="VARCHAR" />
    <result column="currency_type" property="currencyType" jdbcType="VARCHAR" />
    <result column="currency_number" property="currencyNumber" jdbcType="DECIMAL" />
    <result column="freeze_number" property="freezeNumber" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="wallet_address" property="walletAddress" jdbcType="VARCHAR" />
    <result column="in_rate" property="inRate" jdbcType="DECIMAL" />
    <result column="out_rate" property="outRate" jdbcType="DECIMAL" />
    <result column="reserve" property="reserve" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    wallet_id, user_id, pay_password, currency_type, currency_number, freeze_number, 
    status, wallet_address, in_rate, out_rate, reserve
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user_wallet
    where wallet_id = #{walletId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user_wallet
    where wallet_id = #{walletId,jdbcType=BIGINT}
  </delete>
 
  <insert id="insertSelective" parameterType="com.contactsImprove.entity.api.UserWallet" >
    insert into user_wallet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="walletId != null" >
        wallet_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="payPassword != null" >
        pay_password,
      </if>
      <if test="currencyType != null" >
        currency_type,
      </if>
      <if test="currencyNumber != null" >
        currency_number,
      </if>
      <if test="freezeNumber != null" >
        freeze_number,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="walletAddress != null" >
        wallet_address,
      </if>
      <if test="inRate != null and inRate>0" >
        in_rate,
      </if>
      <if test="outRate != null and outRate>0" >
        out_rate,
      </if>
      <if test="reserve != null" >
        reserve,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="walletId != null" >
        #{walletId,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="payPassword != null" >
        #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="currencyType != null" >
        #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="currencyNumber != null" >
        #{currencyNumber,jdbcType=DECIMAL},
      </if>
      <if test="freezeNumber != null" >
        #{freezeNumber,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="walletAddress != null" >
        #{walletAddress,jdbcType=VARCHAR},
      </if>
      <if test="inRate != null and inRate>0 " >
        #{inRate,jdbcType=DECIMAL},
      </if>
      <if test="outRate != null and outRate>0 " >
        #{outRate,jdbcType=DECIMAL},
      </if>
      <if test="reserve != null" >
        #{reserve,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
 <update id="updateUserRate" parameterType="com.contactsImprove.entity.api.UserWallet" >
  update user_wallet uw, users u  
<set >
       <if test="currencyNumber != null and currencyNumber>0" >
       uw.currency_number= case u.type when 2 then #{currencyNumber,jdbcType=DECIMAL} end ,	   
      </if>
      <if test="inRate != null and inRate>=0" >
        uw.in_rate = #{inRate,jdbcType=DECIMAL},
      </if>
      <if test="outRate != null and outRate>=0" >
        uw.out_rate = #{outRate,jdbcType=DECIMAL},
      </if>
</set>
	where uw.user_id=u.user_id and uw.wallet_id = #{walletId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.contactsImprove.entity.api.UserWallet" >
    update user_wallet
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="payPassword != null" >
        pay_password = #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="currencyType != null" >
        currency_type = #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="currencyNumber != null" >
        currency_number = #{currencyNumber,jdbcType=DECIMAL},
      </if>
      <if test="freezeNumber != null" >
        freeze_number = #{freezeNumber,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="walletAddress != null" >
        wallet_address = #{walletAddress,jdbcType=VARCHAR},
      </if>
      <if test="inRate != null and inRate>=0" >
        in_rate = #{inRate,jdbcType=DECIMAL},
      </if>
      <if test="outRate != null and outRate>=0" >
        out_rate = #{outRate,jdbcType=DECIMAL},
      </if>
      <if test="reserve != null" >
        reserve = #{reserve,jdbcType=VARCHAR},
      </if>
    </set>
    where wallet_id = #{walletId,jdbcType=BIGINT}
  </update>
  
  <select id="selectRemainingAmount" resultType="java.util.HashMap" parameterType="java.lang.Long" >
	select uw.currency_number as USDT,uw.currency_number * c.rate as CNY from user_wallet uw ,currency c 
	where uw.user_id=#{userId,jdbcType=BIGINT} and uw.currency_type=c.currency_type;
  </select>
  
  <select id="selectUserWallerList" resultMap="BaseResultMap" >
  	select 
    <include refid="Base_Column_List" />
    from
    	user_wallet
  </select>

  <select id="selectUserWalletByCurrencyAmountAndType" resultMap="BaseResultMap" parameterType="String" >
    ${value}
  </select>  
  
  <select id="selectTestUserWallerList" resultMap="BaseResultMap" parameterType="String" >
    ${value}
  </select> 

  <select id="selectUserWalletByCurrencyAmount" resultMap="BaseResultMap" >
    select uw.user_id   
    from
    	user_wallet uw,
    	users u
    where
    	uw.user_id = u.user_id
    	and u.type = 2
    	and u.status > 0
		and uw.currency_number > #{currencyAmount, jdbcType=DECIMAL}
    order by currency_number desc
    LIMIT #{maxNumber,jdbcType=INTEGER}
  </select>  
        
  <select id="findByLock" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from
    	user_wallet
    where
    	user_id = #{userId, jdbcType=BIGINT}
    	and currency_type = #{currencyType, jdbcType=VARCHAR} for update
  </select> 
  
  <select id="selectByType" resultMap="BaseResultMap" >
    select wallet_id, user_id, pay_password, currency_type, currency_number, freeze_number, 
    	status, wallet_address, in_rate, out_rate
    from
    	user_wallet
    where
    	user_id = #{userId, jdbcType=BIGINT}
    	and currency_type = #{currencyType, jdbcType=VARCHAR}
  </select> 
  
<select id="selectUsersRateByList" resultMap="BaseResultMap" parameterType="com.contactsImprove.utils.PageUtil" statementType="CALLABLE">
		CALL selectByPage(#{queryStr},#{pageNumber,mode=IN, jdbcType=INTEGER},#{pageSize,mode=IN, jdbcType=INTEGER},#{pageTotal,mode=OUT, jdbcType=INTEGER})
</select>  
  
</mapper>