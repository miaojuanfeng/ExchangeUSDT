package com.contactsImprove.controller.api;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.contactsImprove.constant.ResponseCode.StatusCode;
import com.contactsImprove.constant.UsersConst.UsersType;
import com.contactsImprove.entity.api.UserMerchant;
import com.contactsImprove.entity.api.Users;
import com.contactsImprove.service.api.UserMerchantService;
import com.contactsImprove.utils.RSAUtils;
import com.contactsImprove.utils.SessionUtil;

@Controller
@RequestMapping("/api")
public class RSAFactory {
	@Autowired
	UserMerchantService userMerchantService;
	
	/**
	 * 重新成功生成公钥私钥
	 * @param orderPara
	 * @return
	 */
	@RequestMapping(value = "/produceKey",method=RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> produceKey(HttpServletRequest request,Integer keySize){
		Map<String, Object> map = new HashMap<>();
		if(keySize==null || keySize==0) {
			keySize=2048;
		}
		Users user=SessionUtil.getSession(request);		
		if(user.getType()==UsersType._1.status) {
			Map<String,String> key=RSAUtils.createKeys(keySize);
			UserMerchant um=new UserMerchant();
			um.setUserId(user.getUserId());
			um.setPrivateKey(key.get(RSAUtils.key_private));
			um.setPublicKey(key.get(RSAUtils.key_public));
			userMerchantService.updateByPrimaryKeySelective(um);						
		    map.put("code", StatusCode._200.status);
		    map.put("msg", StatusCode._200.msg);	    
		    map.put("data", key);
		}else {
		    map.put("code", StatusCode._310.status);
		    map.put("msg", StatusCode._310.msg);	
		}
				
		return map;		
	}

}
